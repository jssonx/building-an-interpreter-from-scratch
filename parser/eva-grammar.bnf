/**
 * S-expression parser.
 *
 * 1. Install syntax-cli:
 *
 *   npm install -g syntax-cli
 *
 * 2. Generate the parser from this grammar:
 *
 *   syntax-cli -g parser/eva-grammar.bnf -m LALR1 -o parser/evaParser.js
 *   syntax-cli --grammar parser/eva-grammar.bnf --mode LALR1 -o parser/evaParser.js
 *   syntax-cli --grammar parser/eva-grammar.bnf --mode LALR1 --parse '42' --tokenize
 *   syntax-cli --grammar parser/eva-grammar.bnf --mode LALR1 --parse '"Hello"' --tokenize
 *   syntax-cli --grammar parser/eva-grammar.bnf --mode LALR1 --parse 'foo' --tokenize
 *   syntax-cli --grammar parser/eva-grammar.bnf --mode LALR1 --parse '(+ 5 foo)' --tokenize
 *   syntax-cli --grammar parser/eva-grammar.bnf --mode LALR1 --output parser/evaParser.js
 *
 * Examples:
 *
 * Atom: 42, foo, bar, "Hello World"
 *
 * List: (), (+ 5 x), (print "hello")
 */

// -----------------------------------------------
// Lexical grammar (tokens):

%lex

%%

\s+               /* skip whitespace */

\"[^\"]*\"         return 'STRING'

\d+               return 'NUMBER'

[\w\-+*=<>/]+     return 'SYMBOL'

/lex

// -----------------------------------------------
// Syntactic grammar (BNF):

%%

Exp
  : Atom
  | List
  ;

Atom
  : NUMBER { $$ = Number($1) }
  | STRING
  | SYMBOL
  ;

List
  : '(' ListEntries ')' { $$ = $2 }
  ;

ListEntries
  : ListEntries Exp { $1.push($2); $$ = $1 }
  | /* empty */     { $$ = [] }
  ;